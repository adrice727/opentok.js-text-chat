(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function Chat(options) {
  if (!options || !options.session) {
    throw new Error('No session provided.');
  }
  this._session = options.session;

  var signalName = options.signalName || 'chat';
  this._session.on('signal:' + signalName, this._handleChatSignal.bind(this));
  Object.defineProperty(this, 'signalName', { value: signalName });
}

Chat.prototype = {
  constructor: Chat,

  send: function send(text, callback) {
    var signal = this._getMessageSignal(text);
    this._session.signal(signal, callback);
  },

  onMessageReceived: function onMessageReceived(type, callback) {
    callback();
  },

  _handleChatSignal: function _handleChatSignal(signal) {
    var me = this._session.connection.connectionId;
    var from = signal.from.connectionId;
    if (from !== me) {
      var handler = this.onMessageReceived;
      if (handler && typeof handler === 'function') {
        handler(signal.data, signal.from);
      }
    }
  },

  _getMessageSignal: function _getMessageSignal(text) {
    return {
      type: this.signalName,
      data: text
    };
  }
};

exports['default'] = Chat;
module.exports = exports['default'];

},{}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var uiLayout = ['<div class="ot-bubbles"></div>', '<div class="ot-input">', '  <p class="ot-error-zone" hidden>Error sending the message!</p>', '  <div>', '    <textarea placeholder="Write here&hellip;" class="ot-composer"></textarea>', '    <div class="ot-bottom-line">', '      <p class="ot-character-counter"><span></span> characters left</p>', '      <button class="ot-send-button">Send â€º</button>', '    </div>', '  </div>', '</div>'].join('\n');

var bubbleLayout = ['<div>', '  <header class="ot-bubble-header">', '    <p class="ot-message-sender"></p>', '    <time class="ot-message-timestamp"></time>', '  </header>', '</div>'].join('\n');

function later(func) {
  return function () {
    setTimeout(func());
  };
}

function ChatUI(options) {
  options = options || {};
  this.senderId = options.senderId || ('' + Math.random()).substr(2);
  this.senderAlias = options.senderAlias || 'me';
  this.maxTextLength = options.maxTextLength || 1000;
  this.groupDelay = options.groupDelay || 2 * 60 * 1000; // 2 min
  this.timeout = options.timeout || 5000;
  this._messages = [];
  this._setupTemplates();
  this._setupUI(options.container);
  this._updateCharCounter();
}

ChatUI.prototype = Object.defineProperties({
  constructor: ChatUI,

  _setupTemplates: function _setupTemplates() {
    this._bubbleTemplate = document.createElement('section');
    this._bubbleTemplate.innerHTML = bubbleLayout;
    this._bubbleTemplate.classList.add('ot-bubble');
  },

  _setupUI: function _setupUI(parent) {
    parent = document.querySelector(parent) || document.body;

    var chatView = document.createElement('section');
    chatView.innerHTML = uiLayout;
    chatView.classList.add('ot-textchat');

    var sendButton = chatView.querySelector('.ot-send-button');
    var composer = chatView.querySelector('.ot-composer');
    var charCounter = chatView.querySelector('.ot-character-counter > span');
    var errorZone = chatView.querySelector('.ot-error-zone');

    this._composer = composer;
    this._sendButton = sendButton;
    this._charCounter = charCounter;
    this._bubbles = chatView.firstElementChild;
    this._errorZone = errorZone;

    this._sendButton.onclick = this._sendMessage.bind(this);

    // We need to count after handling the event
    var lateUpdateCharCounter = later(this._updateCharCounter.bind(this));
    this._composer.onkeydown = lateUpdateCharCounter;
    this._composer.onchange = lateUpdateCharCounter;

    parent.appendChild(chatView);
  },

  _sendMessage: function _sendMessage() {
    var _this = this;
    var contents = this._composer.value;

    if (contents.length > _this.maxTextLength) {
      _this._showTooLongTextError();
    } else {
      _this._hideErrors();
      if (typeof _this.onMessageReadyToSend === 'function') {
        _this.disableSending();

        var timeout = setTimeout(function () {
          _this.showError();
          _this.enableSending();
        }, _this.timeout);

        var sent = _this.onMessageReadyToSend(contents, function (err) {
          clearTimeout(timeout);
          if (err) {
            _this._showError();
          } else {
            _this.addMessage(new ChatMessage(_this.senderId, _this.senderAlias, contents));
            _this._composer.textContent = '';
            _this._updateCharCounter();
          }
          _this.enableSending();
        });
      }
    }
  },

  _showTooLongTextError: function _showTooLongTextError() {
    this._charCounter.classList.add('error');
  },

  _showError: function _showError() {
    this._errorZone.hidden = false;
  },

  _hideErrors: function _hideErrors() {
    this._errorZone.hidden = true;
    this._charCounter.classList.remove('error');
  },

  _showError: function _showError() {
    this._errorZone.hidden = false;
  },

  _updateCharCounter: function _updateCharCounter() {
    var remaining = this.maxTextLength - this._composer.value.length;
    var isValid = remaining >= 0;
    this._charCounter.classList[!isValid ? 'add' : 'remove']('error');
    this._charCounter.textContent = remaining;
  },

  addMessage: function addMessage(message) {
    var shouldGroup = this._shouldGroup(message);
    this[shouldGroup ? '_groupBubble' : '_addNewBubble'](message);
    this._messages.push(message);
  },

  enableSending: function enableSending() {
    this._sendButton.removeAttribute('disabled');
  },

  disableSending: function disableSending() {
    this._sendButton.disabled = true;
  },

  _shouldGroup: function _shouldGroup(message) {
    if (this._lastMessage && this._lastMessage.senderId === message.senderId) {
      var reference = this._lastMessage.dateTime.getTime();
      var newDate = message.dateTime.getTime();
      return newDate - reference < this.groupDelay;
    }
    return false;
  },

  _groupBubble: function _groupBubble(message) {
    this._lastBubble.appendChild(this._getBubbleContent(message.text));
    this._lastTimestamp.textContent = this._humanize(message.dateTime);
  },

  _addNewBubble: function _addNewBubble(message) {
    this._bubbles.appendChild(this._getBubble(message));
  },

  _getBubbleContent: function _getBubbleContent(safeHtml) {
    var div = document.createElement('DIV');
    div.classList.add('ot-bubble-content');
    div.innerHTML = safeHtml;
    return div;
  },

  _getBubble: function _getBubble(message) {
    var bubble = this._bubbleTemplate.cloneNode(true);
    var wrapper = bubble.querySelector('div');
    var sender = wrapper.querySelector('.ot-message-sender');
    var timestamp = wrapper.querySelector('.ot-message-timestamp');

    // Sender & alias
    bubble.dataset.senderId = message.senderId;
    if (message.senderId === this.senderId) {
      bubble.classList.add('mine');
    }
    sender.textContent = message.senderAlias;

    // Content
    wrapper.appendChild(this._getBubbleContent(message.text));

    // Timestamp
    timestamp.dateTime = message.dateTime.toISOString();
    timestamp.textContent = this._humanize(message.dateTime);

    return bubble;
  },

  _humanize: function _humanize(date) {
    return date.toUTCString();
  }
}, {
  _lastMessage: {
    get: function get() {
      return this._messages[this._messages.length - 1];
    },
    configurable: true,
    enumerable: true
  },
  _lastBubble: {
    get: function get() {
      return this._bubbles.lastElementChild.querySelector('div');
    },
    configurable: true,
    enumerable: true
  },
  _lastTimestamp: {
    get: function get() {
      return this._bubbles.lastElementChild.querySelector('.ot-message-timestamp');
    },
    configurable: true,
    enumerable: true
  }
});

function ChatMessage(senderId, senderAlias, text) {
  Object.defineProperties(this, {
    senderId: { value: senderId },
    senderAlias: { value: senderAlias },
    text: { value: text },
    dateTime: { value: new Date() }
  });
}

exports.ChatUI = ChatUI;
exports.ChatMessage = ChatMessage;

},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _Chat = require('./Chat');

var _Chat2 = _interopRequireDefault(_Chat);

var _ChatUI = require('./ChatUI');

function ChatWidget(options) {
  options = options || {};
  this._chatBox = new _ChatUI.ChatUI(options);
  this._chatBox.disableSending();
  if (options.session) {
    this.start(options);
  }
}

ChatWidget.prototype = {
  constructor: ChatWidget,

  start: function start(options) {
    if (!this._chat) {
      this._chat = new _Chat2['default'](options);
      this._chat.onMessageReceived = this.onMessageReceived.bind(this);
      this._chatBox.senderId = options.session.connection.connectionId;
      this._chatBox.senderAlias = options.session.connection.data;
      this._chatBox.onMessageReadyToSend = this.onMessageReadyToSend.bind(this);
      this._chatBox.enableSending();
    }
  },

  onMessageReadyToSend: function onMessageReadyToSend(contents, callback) {
    this._chat.send(contents, callback);
  },

  onMessageReceived: function onMessageReceived(contents, from) {
    var message = new _ChatUI.ChatMessage(from.connectionId, from.data, contents);
    this._chatBox.addMessage(message);
  }
};

exports['default'] = ChatWidget;
module.exports = exports['default'];

},{"./Chat":1,"./ChatUI":2}],4:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _Chat = require('./Chat');

var _Chat2 = _interopRequireDefault(_Chat);

var _ChatUI = require('./ChatUI');

var _ChatWidget = require('./ChatWidget');

var _ChatWidget2 = _interopRequireDefault(_ChatWidget);

OT.TextChat = {
  Chat: _Chat2['default'],
  ChatUI: _ChatUI.ChatUI,
  ChatMessage: _ChatUI.ChatMessage,
  ChatWidget: _ChatWidget2['default']
};

},{"./Chat":1,"./ChatUI":2,"./ChatWidget":3}]},{},[4])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvaG9tZS9zYWx2YS93b3Jrc3BhY2Uvb3BlbnRvay10ZXh0Y2hhdC9zcmMvQ2hhdC5qcyIsIi9ob21lL3NhbHZhL3dvcmtzcGFjZS9vcGVudG9rLXRleHRjaGF0L3NyYy9DaGF0VUkuanMiLCIvaG9tZS9zYWx2YS93b3Jrc3BhY2Uvb3BlbnRvay10ZXh0Y2hhdC9zcmMvQ2hhdFdpZGdldC5qcyIsIi9ob21lL3NhbHZhL3dvcmtzcGFjZS9vcGVudG9rLXRleHRjaGF0L3NyYy9vcGVudG9rLXRleHRjaGF0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FDQ0EsU0FBUyxJQUFJLENBQUMsT0FBTyxFQUFFO0FBQ3JCLE1BQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFO0FBQUUsVUFBTSxJQUFJLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0dBQUU7QUFDOUUsTUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDOztBQUVoQyxNQUFJLFVBQVUsR0FBRyxPQUFPLENBQUMsVUFBVSxJQUFJLE1BQU0sQ0FBQztBQUM5QyxNQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEdBQUcsVUFBVSxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUM1RSxRQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztDQUNsRTs7QUFFRCxJQUFJLENBQUMsU0FBUyxHQUFHO0FBQ2YsYUFBVyxFQUFFLElBQUk7O0FBRWpCLE1BQUksRUFBRSxjQUFVLElBQUksRUFBRSxRQUFRLEVBQUU7QUFDOUIsUUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO0FB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QUFDLE9BQU8sQ0FBQyxDQUFDO0dBQ25DO0NBQ0YsQ0FBQzs7cUJBRWEsVUFBVTs7Ozs7Ozs7b0JDcENSLFFBQVE7Ozs7c0JBQ1csVUFBVTs7MEJBQ3ZCLGNBQWM7Ozs7QUFFckMsRUFBRSxDQUFDLFFBQVEsR0FBRztBQUNaLE1BQUksbUJBQU07QUFDVixRQUFNLGdCQUFRO0FBQ2QsYUFBVyxxQkFBYTtBQUN4QixZQUFVLHlCQUFZO0NBQ3ZCLENBQUMiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiXG5mdW5jdGlvbiBDaGF0KG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zIHx8ICFvcHRpb25zLnNlc3Npb24pIHsgdGhyb3cgbmV3IEVycm9yKCdObyBzZXNzaW9uIHByb3ZpZGVkLicpOyB9XG4gIHRoaXMuX3Nlc3Npb24gPSBvcHRpb25zLnNlc3Npb247XG5cbiAgdmFyIHNpZ25hbE5hbWUgPSBvcHRpb25zLnNpZ25hbE5hbWUgfHwgJ2NoYXQnO1xuICB0aGlzLl9zZXNzaW9uLm9uKCdzaWduYWw6JyArIHNpZ25hbE5hbWUsIHRoaXMuX2hhbmRsZUNoYXRTaWduYWwuYmluZCh0aGlzKSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnc2lnbmFsTmFtZScsIHsgdmFsdWU6IHNpZ25hbE5hbWUgfSk7XG59XG5cbkNoYXQucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogQ2hhdCxcblxuICBzZW5kOiBmdW5jdGlvbiAodGV4dCwgY2FsbGJhY2spIHtcbiAgICB2YXIgc2lnbmFsID0gdGhpcy5fZ2V0TWVzc2FnZVNpZ25hbCh0ZXh0KTtcbiAgICB0aGlzLl9zZXNzaW9uLnNpZ25hbChzaWduYWwsIGNhbGxiYWNrKTtcbiAgfSxcblxuICBvbk1lc3NhZ2VSZWNlaXZlZDogZnVuY3Rpb24gKHR5cGUsIGNhbGxiYWNrKSB7IGNhbGxiYWNrKCk7IH0sXG5cbiAgX2hhbmRsZUNoYXRTaWduYWw6IGZ1bmN0aW9uIChzaWduYWwpIHtcbiAgICB2YXIgbWUgPSB0aGlzLl9zZXNzaW9uLmNvbm5lY3Rpb24uY29ubmVjdGlvbklkO1xuICAgIHZhciBmcm9tID0gc2lnbmFsLmZyb20uY29ubmVjdGlvbklkO1xuICAgIGlmIChmcm9tICE9PSBtZSkge1xuICAgICAgdmFyIGhhbmRsZXIgPSB0aGlzLm9uTWVzc2FnZVJlY2VpdmVkO1xuICAgICAgaWYgKGhhbmRsZXIgJiYgdHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgaGFuZGxlcihzaWduYWwuZGF0YSwgc2lnbmFsLmZyb20pO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBfZ2V0TWVzc2FnZVNpZ25hbDogZnVuY3Rpb24gKHRleHQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogdGhpcy5zaWduYWxOYW1lLFxuICAgICAgZGF0YTogdGV4dFxuICAgIH07XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IENoYXQ7XG4iLCJcbnZhciB1aUxheW91dCA9IFtcbiAgJzxkaXYgY2xhc3M9XCJvdC1idWJibGVzXCI+PC9kaXY+JyxcbiAgJzxkaXYgY2xhc3M9XCJvdC1pbnB1dFwiPicsXG4gICcgIDxwIGNsYXNzPVwib3QtZXJyb3Item9uZVwiIGhpZGRlbj5FcnJvciBzZW5kaW5nIHRoZSBtZXNzYWdlITwvcD4nLFxuICAnICA8ZGl2PicsXG4gICcgICAgPHRleHRhcmVhIHBsYWNlaG9sZGVyPVwiV3JpdGUgaGVyZSZoZWxsaXA7XCIgY2xhc3M9XCJvdC1jb21wb3NlclwiPjwvdGV4dGFyZWE+JyxcbiAgJyAgICA8ZGl2IGNsYXNzPVwib3QtYm90dG9tLWxpbmVcIj4nLFxuICAnICAgICAgPHAgY2xhc3M9XCJvdC1jaGFyYWN0ZXItY291bnRlclwiPjxzcGFuPjwvc3Bhbj4gY2hhcmFjdGVycyBsZWZ0PC9wPicsXG4gICcgICAgICA8YnV0dG9uIGNsYXNzPVwib3Qtc2VuZC1idXR0b25cIj5TZW5kIOKAujwvYnV0dG9uPicsXG4gICcgICAgPC9kaXY+JyxcbiAgJyAgPC9kaXY+JyxcbiAgJzwvZGl2Pidcbl0uam9pbignXFxuJyk7XG5cbnZhciBidWJibGVMYXlvdXQgPSBbXG4gICc8ZGl2PicsXG4gICcgIDxoZWFkZXIgY2xhc3M9XCJvdC1idWJibGUtaGVhZGVyXCI+JyxcbiAgJyAgICA8cCBjbGFzcz1cIm90LW1lc3NhZ2Utc2VuZGVyXCI+PC9wPicsXG4gICcgICAgPHRpbWUgY2xhc3M9XCJvdC1tZXNzYWdlLXRpbWVzdGFtcFwiPjwvdGltZT4nLFxuICAnICA8L2hlYWRlcj4nLFxuICAnPC9kaXY+J1xuXS5qb2luKCdcXG4nKTtcblxuZnVuY3Rpb24gbGF0ZXIoZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7IHNldFRpbWVvdXQoZnVuYygpKTsgfTtcbn1cblxuZnVuY3Rpb24gQ2hhdFVJKG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHRoaXMuc2VuZGVySWQgPSBvcHRpb25zLnNlbmRlcklkIHx8ICgnJyArIE1hdGgucmFuZG9tKCkpLnN1YnN0cigyKTtcbiAgdGhpcy5zZW5kZXJBbGlhcyA9IG9wdGlvbnMuc2VuZGVyQWxpYXMgfHwgJ21lJztcbiAgdGhpcy5tYXhUZXh0TGVuZ3RoID0gb3B0aW9ucy5tYXhUZXh0TGVuZ3RoIHx8IDEwMDA7XG4gIHRoaXMuZ3JvdXBEZWxheSA9IG9wdGlvbnMuZ3JvdXBEZWxheSB8fCAoMiAqIDYwICogMTAwMCk7IC8vIDIgbWluXG4gIHRoaXMudGltZW91dCA9IG9wdGlvbnMudGltZW91dCB8fCA1MDAwO1xuICB0aGlzLl9tZXNzYWdlcyA9IFtdO1xuICB0aGlzLl9zZXR1cFRlbXBsYXRlcygpO1xuICB0aGlzLl9zZXR1cFVJKG9wdGlvbnMuY29udGFpbmVyKTtcbiAgdGhpcy5fdXBkYXRlQ2hhckNvdW50ZXIoKTtcbn1cblxuQ2hhdFVJLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IENoYXRVSSxcblxuICBfc2V0dXBUZW1wbGF0ZXM6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9idWJibGVUZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NlY3Rpb24nKTtcbiAgICB0aGlzLl9idWJibGVUZW1wbGF0ZS5pbm5lckhUTUwgPSBidWJibGVMYXlvdXQ7XG4gICAgdGhpcy5fYnViYmxlVGVtcGxhdGUuY2xhc3NMaXN0LmFkZCgnb3QtYnViYmxlJyk7XG4gIH0sXG5cbiAgX3NldHVwVUk6IGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICBwYXJlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHBhcmVudCkgfHwgZG9jdW1lbnQuYm9keTtcblxuICAgIHZhciBjaGF0VmlldyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NlY3Rpb24nKTtcbiAgICBjaGF0Vmlldy5pbm5lckhUTUwgPSB1aUxheW91dDtcbiAgICBjaGF0Vmlldy5jbGFzc0xpc3QuYWRkKCdvdC10ZXh0Y2hhdCcpO1xuXG4gICAgdmFyIHNlbmRCdXR0b24gPSBjaGF0Vmlldy5xdWVyeVNlbGVjdG9yKCcub3Qtc2VuZC1idXR0b24nKTtcbiAgICB2YXIgY29tcG9zZXIgPSBjaGF0Vmlldy5xdWVyeVNlbGVjdG9yKCcub3QtY29tcG9zZXInKTtcbiAgICB2YXIgY2hhckNvdW50ZXIgPSBjaGF0Vmlldy5xdWVyeVNlbGVjdG9yKCcub3QtY2hhcmFjdGVyLWNvdW50ZXIgPiBzcGFuJyk7XG4gICAgdmFyIGVycm9yWm9uZSA9IGNoYXRWaWV3LnF1ZXJ5U2VsZWN0b3IoJy5vdC1lcnJvci16b25lJyk7XG5cbiAgICB0aGlzLl9jb21wb3NlciA9IGNvbXBvc2VyO1xuICAgIHRoaXMuX3NlbmRCdXR0b24gPSBzZW5kQnV0dG9uO1xuICAgIHRoaXMuX2NoYXJDb3VudGVyID0gY2hhckNvdW50ZXI7XG4gICAgdGhpcy5fYnViYmxlcyA9IGNoYXRWaWV3LmZpcnN0RWxlbWVudENoaWxkO1xuICAgIHRoaXMuX2Vycm9yWm9uZSA9IGVycm9yWm9uZTtcblxuICAgIHRoaXMuX3NlbmRCdXR0b24ub25jbGljayA9IHRoaXMuX3NlbmRNZXNzYWdlLmJpbmQodGhpcyk7XG5cbiAgICAvLyBXZSBuZWVkIHRvIGNvdW50IGFmdGVyIGhhbmRsaW5nIHRoZSBldmVudFxuICAgIHZhciBsYXRlVXBkYXRlQ2hhckNvdW50ZXIgPSBsYXRlcih0aGlzLl91cGRhdGVDaGFyQ291bnRlci5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLl9jb21wb3Nlci5vbmtleWRvd24gPSBsYXRlVXBkYXRlQ2hhckNvdW50ZXI7XG4gICAgdGhpcy5fY29tcG9zZXIub25jaGFuZ2UgPSBsYXRlVXBkYXRlQ2hhckNvdW50ZXI7XG5cbiAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoY2hhdFZpZXcpO1xuICB9LFxuXG4gIF9zZW5kTWVzc2FnZTogZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIGNvbnRlbnRzID0gdGhpcy5fY29tcG9zZXIudmFsdWU7XG5cbiAgICBpZiAoY29udGVudHMubGVuZ3RoID4gX3RoaXMubWF4VGV4dExlbmd0aCkge1xuICAgICAgX3RoaXMuX3Nob3dUb29Mb25nVGV4dEVycm9yKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgX3RoaXMuX2hpZGVFcnJvcnMoKTtcbiAgICAgIGlmICh0eXBlb2YgX3RoaXMub25NZXNzYWdlUmVhZHlUb1NlbmQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgX3RoaXMuZGlzYWJsZVNlbmRpbmcoKTtcblxuICAgICAgICB2YXIgdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzLnNob3dFcnJvcigpO1xuICAgICAgICAgIF90aGlzLmVuYWJsZVNlbmRpbmcoKTtcbiAgICAgICAgfSwgX3RoaXMudGltZW91dCk7XG5cbiAgICAgICAgdmFyIHNlbnQgPSBfdGhpcy5vbk1lc3NhZ2VSZWFkeVRvU2VuZChjb250ZW50cywgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBfdGhpcy5fc2hvd0Vycm9yKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX3RoaXMuYWRkTWVzc2FnZShuZXcgQ2hhdE1lc3NhZ2UoXG4gICAgICAgICAgICAgIF90aGlzLnNlbmRlcklkLFxuICAgICAgICAgICAgICBfdGhpcy5zZW5kZXJBbGlhcyxcbiAgICAgICAgICAgICAgY29udGVudHNcbiAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgX3RoaXMuX2NvbXBvc2VyLnRleHRDb250ZW50ID0gJyc7XG4gICAgICAgICAgICBfdGhpcy5fdXBkYXRlQ2hhckNvdW50ZXIoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgX3RoaXMuZW5hYmxlU2VuZGluZygpO1xuICAgICAgICB9KTtcblxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBfc2hvd1Rvb0xvbmdUZXh0RXJyb3I6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9jaGFyQ291bnRlci5jbGFzc0xpc3QuYWRkKCdlcnJvcicpO1xuICB9LFxuXG4gIF9zaG93RXJyb3I6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9lcnJvclpvbmUuaGlkZGVuID0gZmFsc2U7XG4gIH0sXG5cbiAgX2hpZGVFcnJvcnM6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9lcnJvclpvbmUuaGlkZGVuID0gdHJ1ZTtcbiAgICB0aGlzLl9jaGFyQ291bnRlci5jbGFzc0xpc3QucmVtb3ZlKCdlcnJvcicpO1xuICB9LFxuXG4gIF9zaG93RXJyb3I6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9lcnJvclpvbmUuaGlkZGVuID0gZmFsc2U7XG4gIH0sXG5cbiAgX3VwZGF0ZUNoYXJDb3VudGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlbWFpbmluZyA9IHRoaXMubWF4VGV4dExlbmd0aCAtIHRoaXMuX2NvbXBvc2VyLnZhbHVlLmxlbmd0aDtcbiAgICB2YXIgaXNWYWxpZCA9IHJlbWFpbmluZyA+PSAwO1xuICAgIHRoaXMuX2NoYXJDb3VudGVyLmNsYXNzTGlzdFshaXNWYWxpZCA/ICdhZGQnIDogJ3JlbW92ZSddKCdlcnJvcicpO1xuICAgIHRoaXMuX2NoYXJDb3VudGVyLnRleHRDb250ZW50ID0gcmVtYWluaW5nO1xuICB9LFxuXG4gIGFkZE1lc3NhZ2U6IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgdmFyIHNob3VsZEdyb3VwID0gdGhpcy5fc2hvdWxkR3JvdXAobWVzc2FnZSk7XG4gICAgdGhpc1sgc2hvdWxkR3JvdXAgPyAnX2dyb3VwQnViYmxlJyA6ICdfYWRkTmV3QnViYmxlJyBdKG1lc3NhZ2UpO1xuICAgIHRoaXMuX21lc3NhZ2VzLnB1c2gobWVzc2FnZSk7XG4gIH0sXG5cbiAgZW5hYmxlU2VuZGluZzogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX3NlbmRCdXR0b24ucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xuICB9LFxuXG4gIGRpc2FibGVTZW5kaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fc2VuZEJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7XG4gIH0sXG5cbiAgX3Nob3VsZEdyb3VwOiBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgIGlmICh0aGlzLl9sYXN0TWVzc2FnZSAmJiB0aGlzLl9sYXN0TWVzc2FnZS5zZW5kZXJJZCA9PT0gbWVzc2FnZS5zZW5kZXJJZCkge1xuICAgICAgdmFyIHJlZmVyZW5jZSA9IHRoaXMuX2xhc3RNZXNzYWdlLmRhdGVUaW1lLmdldFRpbWUoKTtcbiAgICAgIHZhciBuZXdEYXRlID0gbWVzc2FnZS5kYXRlVGltZS5nZXRUaW1lKCk7XG4gICAgICByZXR1cm4gbmV3RGF0ZSAtIHJlZmVyZW5jZSA8IHRoaXMuZ3JvdXBEZWxheTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIF9ncm91cEJ1YmJsZTogZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICB0aGlzLl9sYXN0QnViYmxlLmFwcGVuZENoaWxkKHRoaXMuX2dldEJ1YmJsZUNvbnRlbnQobWVzc2FnZS50ZXh0KSk7XG4gICAgdGhpcy5fbGFzdFRpbWVzdGFtcC50ZXh0Q29udGVudCA9IHRoaXMuX2h1bWFuaXplKG1lc3NhZ2UuZGF0ZVRpbWUpO1xuICB9LFxuXG4gIF9hZGROZXdCdWJibGU6IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgdGhpcy5fYnViYmxlcy5hcHBlbmRDaGlsZCh0aGlzLl9nZXRCdWJibGUobWVzc2FnZSkpO1xuICB9LFxuXG4gIGdldCBfbGFzdE1lc3NhZ2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21lc3NhZ2VzW3RoaXMuX21lc3NhZ2VzLmxlbmd0aCAtIDFdO1xuICB9LFxuXG4gIGdldCBfbGFzdEJ1YmJsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fYnViYmxlcy5sYXN0RWxlbWVudENoaWxkLnF1ZXJ5U2VsZWN0b3IoJ2RpdicpO1xuICB9LFxuXG4gIGdldCBfbGFzdFRpbWVzdGFtcCgpIHtcbiAgICByZXR1cm4gdGhpcy5fYnViYmxlc1xuICAgICAgLmxhc3RFbGVtZW50Q2hpbGQucXVlcnlTZWxlY3RvcignLm90LW1lc3NhZ2UtdGltZXN0YW1wJyk7XG4gIH0sXG5cbiAgX2dldEJ1YmJsZUNvbnRlbnQ6IGZ1bmN0aW9uIChzYWZlSHRtbCkge1xuICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdESVYnKTtcbiAgICBkaXYuY2xhc3NMaXN0LmFkZCgnb3QtYnViYmxlLWNvbnRlbnQnKTtcbiAgICBkaXYuaW5uZXJIVE1MID0gc2FmZUh0bWw7XG4gICAgcmV0dXJuIGRpdjtcbiAgfSxcblxuICBfZ2V0QnViYmxlOiBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgIHZhciBidWJibGUgPSB0aGlzLl9idWJibGVUZW1wbGF0ZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgdmFyIHdyYXBwZXIgPSBidWJibGUucXVlcnlTZWxlY3RvcignZGl2Jyk7XG4gICAgdmFyIHNlbmRlciA9IHdyYXBwZXIucXVlcnlTZWxlY3RvcignLm90LW1lc3NhZ2Utc2VuZGVyJyk7XG4gICAgdmFyIHRpbWVzdGFtcCA9IHdyYXBwZXIucXVlcnlTZWxlY3RvcignLm90LW1lc3NhZ2UtdGltZXN0YW1wJyk7XG5cbiAgICAvLyBTZW5kZXIgJiBhbGlhc1xuICAgIGJ1YmJsZS5kYXRhc2V0LnNlbmRlcklkID0gbWVzc2FnZS5zZW5kZXJJZDtcbiAgICBpZiAobWVzc2FnZS5zZW5kZXJJZCA9PT0gdGhpcy5zZW5kZXJJZCkge1xuICAgICAgYnViYmxlLmNsYXNzTGlzdC5hZGQoJ21pbmUnKTtcbiAgICB9XG4gICAgc2VuZGVyLnRleHRDb250ZW50ID0gbWVzc2FnZS5zZW5kZXJBbGlhcztcblxuICAgIC8vIENvbnRlbnRcbiAgICB3cmFwcGVyLmFwcGVuZENoaWxkKHRoaXMuX2dldEJ1YmJsZUNvbnRlbnQobWVzc2FnZS50ZXh0KSk7XG5cbiAgICAvLyBUaW1lc3RhbXBcbiAgICB0aW1lc3RhbXAuZGF0ZVRpbWUgPSBtZXNzYWdlLmRhdGVUaW1lLnRvSVNPU3RyaW5nKCk7XG4gICAgdGltZXN0YW1wLnRleHRDb250ZW50ID0gdGhpcy5faHVtYW5pemUobWVzc2FnZS5kYXRlVGltZSk7XG5cbiAgICByZXR1cm4gYnViYmxlO1xuICB9LFxuXG4gIF9odW1hbml6ZTogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS50b1VUQ1N0cmluZygpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBDaGF0TWVzc2FnZShzZW5kZXJJZCwgc2VuZGVyQWxpYXMsIHRleHQpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgIHNlbmRlcklkOiB7IHZhbHVlOiBzZW5kZXJJZCB9LFxuICAgIHNlbmRlckFsaWFzOiB7IHZhbHVlOiBzZW5kZXJBbGlhcyB9LFxuICAgIHRleHQ6IHsgdmFsdWU6IHRleHQgfSxcbiAgICBkYXRlVGltZTogeyB2YWx1ZTogbmV3IERhdGUoKSB9XG4gIH0pO1xufVxuXG5leHBvcnQgeyBDaGF0VUksIENoYXRNZXNzYWdlIH07XG4iLCJcbmltcG9ydCBDaGF0IGZyb20gJy4vQ2hhdCc7XG5pbXBvcnQgeyBDaGF0VUksIENoYXRNZXNzYWdlIH0gZnJvbSAnLi9DaGF0VUknO1xuXG5mdW5jdGlvbiBDaGF0V2lkZ2V0KG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHRoaXMuX2NoYXRCb3ggPSBuZXcgQ2hhdFVJKG9wdGlvbnMpO1xuICB0aGlzLl9jaGF0Qm94LmRpc2FibGVTZW5kaW5nKCk7XG4gIGlmIChvcHRpb25zLnNlc3Npb24pIHtcbiAgICB0aGlzLnN0YXJ0KG9wdGlvbnMpO1xuICB9XG59XG5cbkNoYXRXaWRnZXQucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogQ2hhdFdpZGdldCxcblxuICBzdGFydDogZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICBpZiAoIXRoaXMuX2NoYXQpIHtcbiAgICAgIHRoaXMuX2NoYXQgPSBuZXcgQ2hhdChvcHRpb25zKTtcbiAgICAgIHRoaXMuX2NoYXQub25NZXNzYWdlUmVjZWl2ZWQgPSB0aGlzLm9uTWVzc2FnZVJlY2VpdmVkLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLl9jaGF0Qm94LnNlbmRlcklkID0gb3B0aW9ucy5zZXNzaW9uLmNvbm5lY3Rpb24uY29ubmVjdGlvbklkO1xuICAgICAgdGhpcy5fY2hhdEJveC5zZW5kZXJBbGlhcyA9IG9wdGlvbnMuc2Vzc2lvbi5jb25uZWN0aW9uLmRhdGE7XG4gICAgICB0aGlzLl9jaGF0Qm94Lm9uTWVzc2FnZVJlYWR5VG9TZW5kID0gdGhpcy5vbk1lc3NhZ2VSZWFkeVRvU2VuZC5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5fY2hhdEJveC5lbmFibGVTZW5kaW5nKCk7XG4gICAgfVxuICB9LFxuXG4gIG9uTWVzc2FnZVJlYWR5VG9TZW5kOiBmdW5jdGlvbiAoY29udGVudHMsIGNhbGxiYWNrKSB7XG4gICAgdGhpcy5fY2hhdC5zZW5kKGNvbnRlbnRzLCBjYWxsYmFjayk7XG4gIH0sXG5cbiAgb25NZXNzYWdlUmVjZWl2ZWQ6IGZ1bmN0aW9uIChjb250ZW50cywgZnJvbSkge1xuICAgIHZhciBtZXNzYWdlID0gbmV3IENoYXRNZXNzYWdlKGZyb20uY29ubmVjdGlvbklkLCBmcm9tLmRhdGEsIGNvbnRlbnRzKTtcbiAgICB0aGlzLl9jaGF0Qm94LmFkZE1lc3NhZ2UobWVzc2FnZSk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IENoYXRXaWRnZXQ7XG4iLCJcbmltcG9ydCBDaGF0IGZyb20gJy4vQ2hhdCc7XG5pbXBvcnQgeyBDaGF0VUksIENoYXRNZXNzYWdlIH0gZnJvbSAnLi9DaGF0VUknO1xuaW1wb3J0IENoYXRXaWRnZXQgZnJvbSAnLi9DaGF0V2lkZ2V0JztcblxuT1QuVGV4dENoYXQgPSB7XG4gIENoYXQ6IENoYXQsXG4gIENoYXRVSTogQ2hhdFVJLFxuICBDaGF0TWVzc2FnZTogQ2hhdE1lc3NhZ2UsXG4gIENoYXRXaWRnZXQ6IENoYXRXaWRnZXRcbn07XG4iXX0=
