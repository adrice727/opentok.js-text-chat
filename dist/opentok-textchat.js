(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function Chat(options) {
  if (!options || !options.session) {
    throw new Error('No session provided.');
  }
  this._session = options.session;

  var signalName = options.signalName || 'chat';
  this._session.on('signal:' + signalName, this._handleChatSignal.bind(this));
  Object.defineProperty(this, 'signalName', { value: signalName });
}

Chat.prototype = {
  constructor: Chat,

  send: function send(text, callback) {
    var signal = this._getMessageSignal(text);
    this._session.signal(signal, callback);
  },

  onMessageReceived: function onMessageReceived(type, callback) {
    callback();
  },

  _handleChatSignal: function _handleChatSignal(signal) {
    var me = this._session.connection.connectionId;
    var from = signal.from.connectionId;
    if (from !== me) {
      var handler = this.onMessageReceived;
      if (handler && typeof handler === 'function') {
        handler(signal.data, signal.from);
      }
    }
  },

  _getMessageSignal: function _getMessageSignal(text) {
    return {
      type: this.signalName,
      data: text
    };
  }
};

exports['default'] = Chat;
module.exports = exports['default'];

},{}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var uiLayout = ['<div class="ot-bubbles"></div>', '<div class="ot-input">', '  <p class="ot-error-zone" hidden>Error sending the message!</p>', '  <div>', '    <textarea placeholder="Write here&hellip;" class="ot-composer"></textarea>', '    <div class="ot-bottom-line">', '      <p class="ot-character-counter"><span></span> characters left</p>', '      <button class="ot-send-button">Send â€º</button>', '    </div>', '  </div>', '</div>'].join('\n');

var bubbleLayout = ['<div>', '  <header class="ot-bubble-header">', '    <p class="ot-message-sender"></p>', '    <time class="ot-message-timestamp"></time>', '  </header>', '</div>'].join('\n');

function ChatUI(options) {
  options = options || {};
  this.senderId = options.senderId || ('' + Math.random()).substr(2);
  this.senderAlias = options.senderAlias || 'me';
  this.maxTextLength = options.maxTextLength || 1000;
  this.groupDelay = options.groupDelay || 2 * 60 * 1000; // 2 min
  this.timeout = options.timeout || 5000;
  this._messages = [];
  this._setupTemplates();
  this._setupUI(options.container);
  this._updateCharCounter();
}

ChatUI.prototype = Object.defineProperties({
  constructor: ChatUI,

  _setupTemplates: function _setupTemplates() {
    this._bubbleTemplate = document.createElement('section');
    this._bubbleTemplate.innerHTML = bubbleLayout;
    this._bubbleTemplate.classList.add('ot-bubble');
  },

  _setupUI: function _setupUI(parent) {
    parent = document.querySelector(parent) || document.body;

    var chatView = document.createElement('section');
    chatView.innerHTML = uiLayout;
    chatView.classList.add('ot-textchat');

    var sendButton = chatView.querySelector('.ot-send-button');
    var composer = chatView.querySelector('.ot-composer');
    var charCounter = chatView.querySelector('.ot-character-counter > span');
    var errorZone = chatView.querySelector('.ot-error-zone');

    this._composer = composer;
    this._sendButton = sendButton;
    this._charCounter = charCounter;
    this._bubbles = chatView.firstElementChild;
    this._errorZone = errorZone;

    this._sendButton.onclick = this._sendMessage.bind(this);
    this._composer.onkeyup = this._updateCharCounter.bind(this);
    this._composer.onkeydown = this._controlComposerInput.bind(this);

    parent.appendChild(chatView);
  },

  _sendMessage: function _sendMessage() {
    var _this = this;
    var contents = this._composer.value;

    if (contents.length > _this.maxTextLength) {
      _this._showTooLongTextError();
    } else {
      _this._hideErrors();
      if (typeof _this.onMessageReadyToSend === 'function') {
        _this.disableSending();

        var timeout = setTimeout(function () {
          _this.showError();
          _this.enableSending();
        }, _this.timeout);

        var sent = _this.onMessageReadyToSend(contents, function (err) {
          clearTimeout(timeout);
          if (err) {
            _this._showError();
          } else {
            _this.addMessage(new ChatMessage(_this.senderId, _this.senderAlias, contents));
            _this._composer.value = '';
            _this._updateCharCounter();
          }
          _this.enableSending();
        });
      }
    }
  },

  _showTooLongTextError: function _showTooLongTextError() {
    this._charCounter.classList.add('error');
  },

  _showError: function _showError() {
    this._errorZone.hidden = false;
  },

  _hideErrors: function _hideErrors() {
    this._errorZone.hidden = true;
    this._charCounter.classList.remove('error');
  },

  _showError: function _showError() {
    this._errorZone.hidden = false;
  },

  _controlComposerInput: function _controlComposerInput(evt) {
    var isEnter = evt.which === 13 || evt.keyCode === 13;
    if (!evt.shiftKey && isEnter) {
      evt.preventDefault();
      this._sendMessage();
    }
  },

  _updateCharCounter: function _updateCharCounter() {
    var remaining = this.maxTextLength - this._composer.value.length;
    var isValid = remaining >= 0;
    this._charCounter.classList[!isValid ? 'add' : 'remove']('error');
    this._charCounter.textContent = remaining;
  },

  addMessage: function addMessage(message) {
    var shouldGroup = this._shouldGroup(message);
    this[shouldGroup ? '_groupBubble' : '_addNewBubble'](message);
    this._messages.push(message);
  },

  render: function render(raw, isGrouping) {
    return raw.replace(/(\r\n|\r|\n)/g, '<br/>');
  },

  enableSending: function enableSending() {
    this._sendButton.removeAttribute('disabled');
    this._composer.removeAttribute('disabled');
    this._composer.focus();
  },

  disableSending: function disableSending() {
    this._sendButton.disabled = true;
    this._composer.disabled = true;
  },

  _shouldGroup: function _shouldGroup(message) {
    if (this._lastMessage && this._lastMessage.senderId === message.senderId) {
      var reference = this._lastMessage.dateTime.getTime();
      var newDate = message.dateTime.getTime();
      return newDate - reference < this.groupDelay;
    }
    return false;
  },

  _groupBubble: function _groupBubble(message) {
    var contents = this.render(message.text, true);
    this._lastBubble.appendChild(this._getBubbleContent(contents));
    this._lastTimestamp.textContent = this._humanize(message.dateTime);
  },

  _addNewBubble: function _addNewBubble(message) {
    this._bubbles.appendChild(this._getBubble(message));
  },

  _getBubbleContent: function _getBubbleContent(safeHtml) {
    var div = document.createElement('DIV');
    div.classList.add('ot-bubble-content');
    div.innerHTML = safeHtml;
    return div;
  },

  _getBubble: function _getBubble(message) {
    var bubble = this._bubbleTemplate.cloneNode(true);
    var wrapper = bubble.querySelector('div');
    var sender = wrapper.querySelector('.ot-message-sender');
    var timestamp = wrapper.querySelector('.ot-message-timestamp');

    // Sender & alias
    bubble.dataset.senderId = message.senderId;
    if (message.senderId === this.senderId) {
      bubble.classList.add('mine');
    }
    sender.textContent = message.senderAlias;

    // Content
    var contents = this.render(message.text, false);
    wrapper.appendChild(this._getBubbleContent(contents));

    // Timestamp
    timestamp.dateTime = message.dateTime.toISOString();
    timestamp.textContent = this._humanize(message.dateTime);

    return bubble;
  },

  _humanize: function _humanize(date) {
    return date.toUTCString();
  }
}, {
  _lastMessage: {
    get: function get() {
      return this._messages[this._messages.length - 1];
    },
    configurable: true,
    enumerable: true
  },
  _lastBubble: {
    get: function get() {
      return this._bubbles.lastElementChild.querySelector('div');
    },
    configurable: true,
    enumerable: true
  },
  _lastTimestamp: {
    get: function get() {
      return this._bubbles.lastElementChild.querySelector('.ot-message-timestamp');
    },
    configurable: true,
    enumerable: true
  }
});

function ChatMessage(senderId, senderAlias, text) {
  Object.defineProperties(this, {
    senderId: { value: senderId },
    senderAlias: { value: senderAlias },
    text: { value: text },
    dateTime: { value: new Date() }
  });
}

exports.ChatUI = ChatUI;
exports.ChatMessage = ChatMessage;

},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _Chat = require('./Chat');

var _Chat2 = _interopRequireDefault(_Chat);

var _ChatUI = require('./ChatUI');

function ChatWidget(options) {
  options = options || {};
  this._chatBox = new _ChatUI.ChatUI(options);
  this._chatBox.disableSending();
  if (options.session) {
    this.start(options);
  }
}

ChatWidget.prototype = {
  constructor: ChatWidget,

  start: function start(options) {
    if (!this._chat) {
      this._chat = new _Chat2['default'](options);
      this._chat.onMessageReceived = this.onMessageReceived.bind(this);
      this._chatBox.senderId = options.session.connection.connectionId;
      this._chatBox.senderAlias = options.session.connection.data;
      this._chatBox.onMessageReadyToSend = this.onMessageReadyToSend.bind(this);
      this._chatBox.enableSending();
    }
  },

  onMessageReadyToSend: function onMessageReadyToSend(contents, callback) {
    this._chat.send(contents, callback);
  },

  onMessageReceived: function onMessageReceived(contents, from) {
    var message = new _ChatUI.ChatMessage(from.connectionId, from.data, contents);
    this._chatBox.addMessage(message);
  }
};

exports['default'] = ChatWidget;
module.exports = exports['default'];

},{"./Chat":1,"./ChatUI":2}],4:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _Chat = require('./Chat');

var _Chat2 = _interopRequireDefault(_Chat);

var _ChatUI = require('./ChatUI');

var _ChatWidget = require('./ChatWidget');

var _ChatWidget2 = _interopRequireDefault(_ChatWidget);

OT.TextChat = {
  Chat: _Chat2['default'],
  ChatUI: _ChatUI.ChatUI,
  ChatMessage: _ChatUI.ChatMessage,
  ChatWidget: _ChatWidget2['default']
};

},{"./Chat":1,"./ChatUI":2,"./ChatWidget":3}]},{},[4])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
