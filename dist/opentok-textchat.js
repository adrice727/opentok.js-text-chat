(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function Chat(options) {
  if (!options || !options.session) {
    throw new Error('No session provided.');
  }
  this._session = options.session;

  var signalName = options.signalName || 'chat';
  this._session.on('signal:' + signalName, this._handleChatSignal.bind(this));
  Object.defineProperty(this, 'signalName', { value: signalName });
}

Chat.prototype = {
  constructor: Chat,

  send: function send(text, callback) {
    var signal = this._getMessageSignal(text);
    this._session.signal(signal, callback);
  },

  onMessageReceived: function onMessageReceived(type, callback) {
    callback();
  },

  _handleChatSignal: function _handleChatSignal(signal) {
    var me = this._session.connection.connectionId;
    var from = signal.from.connectionId;
    if (from !== me) {
      var handler = this.onMessageReceived;
      if (handler && typeof handler === 'function') {
        handler(signal.data, signal.from);
      }
    }
  },

  _getMessageSignal: function _getMessageSignal(text) {
    return {
      type: this.signalName,
      data: text
    };
  }
};

exports['default'] = Chat;
module.exports = exports['default'];

},{}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var uiLayout = ['<div class="ot-bubbles"></div>', '<div class="ot-input">', '  <p class="ot-error-zone" hidden>Error sending the message!</p>', '  <div>', '    <textarea placeholder="Write here&hellip;" class="ot-composer"></textarea>', '    <div class="ot-bottom-line">', '      <p class="ot-character-counter"><span></span> characters left</p>', '      <button class="ot-send-button">Send â€º</button>', '    </div>', '  </div>', '</div>'].join('\n');

var bubbleLayout = ['<div>', '  <header class="ot-bubble-header">', '    <p class="ot-message-sender"></p>', '    <time class="ot-message-timestamp"></time>', '  </header>', '</div>'].join('\n');

function ChatUI(options) {
  options = options || {};
  this.senderId = options.senderId || ('' + Math.random()).substr(2);
  this.senderAlias = options.senderAlias || 'me';
  this.maxTextLength = options.maxTextLength || 1000;
  this.groupDelay = options.groupDelay || 2 * 60 * 1000; // 2 min
  this.timeout = options.timeout || 5000;
  this._messages = [];
  this._setupTemplates();
  this._setupUI(options.container);
  this._updateCharCounter();
}

ChatUI.prototype = Object.defineProperties({
  constructor: ChatUI,

  _setupTemplates: function _setupTemplates() {
    this._bubbleTemplate = document.createElement('section');
    this._bubbleTemplate.innerHTML = bubbleLayout;
    this._bubbleTemplate.classList.add('ot-bubble');
  },

  _setupUI: function _setupUI(parent) {
    parent = document.querySelector(parent) || document.body;

    var chatView = document.createElement('section');
    chatView.innerHTML = uiLayout;
    chatView.classList.add('ot-textchat');

    var sendButton = chatView.querySelector('.ot-send-button');
    var composer = chatView.querySelector('.ot-composer');
    var charCounter = chatView.querySelector('.ot-character-counter > span');
    var errorZone = chatView.querySelector('.ot-error-zone');

    this._composer = composer;
    this._sendButton = sendButton;
    this._charCounter = charCounter;
    this._bubbles = chatView.firstElementChild;
    this._errorZone = errorZone;

    this._sendButton.onclick = this._sendMessage.bind(this);
    this._composer.onkeyup = this._updateCharCounter.bind(this);
    this._composer.onkeydown = this._controlComposerInput.bind(this);

    parent.appendChild(chatView);
  },

  _sendMessage: function _sendMessage() {
    var _this = this;
    var contents = this._composer.value;

    if (contents.length > _this.maxTextLength) {
      _this._showTooLongTextError();
    } else {
      _this._hideErrors();
      if (typeof _this.onMessageReadyToSend === 'function') {
        _this.disableSending();

        var timeout = setTimeout(function () {
          _this.showError();
          _this.enableSending();
        }, _this.timeout);

        var sent = _this.onMessageReadyToSend(contents, function (err) {
          clearTimeout(timeout);
          if (err) {
            _this._showError();
          } else {
            _this.addMessage(new ChatMessage(_this.senderId, _this.senderAlias, contents));
            _this._composer.value = '';
            _this._updateCharCounter();
          }
          _this.enableSending();
        });
      }
    }
  },

  _showTooLongTextError: function _showTooLongTextError() {
    this._charCounter.classList.add('error');
  },

  _showError: function _showError() {
    this._errorZone.hidden = false;
  },

  _hideErrors: function _hideErrors() {
    this._errorZone.hidden = true;
    this._charCounter.classList.remove('error');
  },

  _showError: function _showError() {
    this._errorZone.hidden = false;
  },

  _controlComposerInput: function _controlComposerInput(evt) {
    var isEnter = evt.which === 13 || evt.keyCode === 13;
    if (!evt.shiftKey && isEnter) {
      evt.preventDefault();
      this._sendMessage();
    }
  },

  _updateCharCounter: function _updateCharCounter() {
    var remaining = this.maxTextLength - this._composer.value.length;
    var isValid = remaining >= 0;
    this._charCounter.classList[!isValid ? 'add' : 'remove']('error');
    this._charCounter.textContent = remaining;
  },

  addMessage: function addMessage(message) {
    var shouldGroup = this._shouldGroup(message);
    this[shouldGroup ? '_groupBubble' : '_addNewBubble'](message);
    this._messages.push(message);
  },

  enableSending: function enableSending() {
    this._sendButton.removeAttribute('disabled');
    this._composer.removeAttribute('disabled');
    this._composer.focus();
  },

  disableSending: function disableSending() {
    this._sendButton.disabled = true;
    this._composer.disabled = true;
  },

  _shouldGroup: function _shouldGroup(message) {
    if (this._lastMessage && this._lastMessage.senderId === message.senderId) {
      var reference = this._lastMessage.dateTime.getTime();
      var newDate = message.dateTime.getTime();
      return newDate - reference < this.groupDelay;
    }
    return false;
  },

  _groupBubble: function _groupBubble(message) {
    this._lastBubble.appendChild(this._getBubbleContent(message.text));
    this._lastTimestamp.textContent = this._humanize(message.dateTime);
  },

  _addNewBubble: function _addNewBubble(message) {
    this._bubbles.appendChild(this._getBubble(message));
  },

  _getBubbleContent: function _getBubbleContent(safeHtml) {
    var div = document.createElement('DIV');
    div.classList.add('ot-bubble-content');
    div.innerHTML = safeHtml;
    return div;
  },

  _getBubble: function _getBubble(message) {
    var bubble = this._bubbleTemplate.cloneNode(true);
    var wrapper = bubble.querySelector('div');
    var sender = wrapper.querySelector('.ot-message-sender');
    var timestamp = wrapper.querySelector('.ot-message-timestamp');

    // Sender & alias
    bubble.dataset.senderId = message.senderId;
    if (message.senderId === this.senderId) {
      bubble.classList.add('mine');
    }
    sender.textContent = message.senderAlias;

    // Content
    wrapper.appendChild(this._getBubbleContent(message.text));

    // Timestamp
    timestamp.dateTime = message.dateTime.toISOString();
    timestamp.textContent = this._humanize(message.dateTime);

    return bubble;
  },

  _humanize: function _humanize(date) {
    return date.toUTCString();
  }
}, {
  _lastMessage: {
    get: function get() {
      return this._messages[this._messages.length - 1];
    },
    configurable: true,
    enumerable: true
  },
  _lastBubble: {
    get: function get() {
      return this._bubbles.lastElementChild.querySelector('div');
    },
    configurable: true,
    enumerable: true
  },
  _lastTimestamp: {
    get: function get() {
      return this._bubbles.lastElementChild.querySelector('.ot-message-timestamp');
    },
    configurable: true,
    enumerable: true
  }
});

function ChatMessage(senderId, senderAlias, text) {
  Object.defineProperties(this, {
    senderId: { value: senderId },
    senderAlias: { value: senderAlias },
    text: { value: text },
    dateTime: { value: new Date() }
  });
}

exports.ChatUI = ChatUI;
exports.ChatMessage = ChatMessage;

},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _Chat = require('./Chat');

var _Chat2 = _interopRequireDefault(_Chat);

var _ChatUI = require('./ChatUI');

function ChatWidget(options) {
  options = options || {};
  this._chatBox = new _ChatUI.ChatUI(options);
  this._chatBox.disableSending();
  if (options.session) {
    this.start(options);
  }
}

ChatWidget.prototype = {
  constructor: ChatWidget,

  start: function start(options) {
    if (!this._chat) {
      this._chat = new _Chat2['default'](options);
      this._chat.onMessageReceived = this.onMessageReceived.bind(this);
      this._chatBox.senderId = options.session.connection.connectionId;
      this._chatBox.senderAlias = options.session.connection.data;
      this._chatBox.onMessageReadyToSend = this.onMessageReadyToSend.bind(this);
      this._chatBox.enableSending();
    }
  },

  onMessageReadyToSend: function onMessageReadyToSend(contents, callback) {
    this._chat.send(contents, callback);
  },

  onMessageReceived: function onMessageReceived(contents, from) {
    var message = new _ChatUI.ChatMessage(from.connectionId, from.data, contents);
    this._chatBox.addMessage(message);
  }
};

exports['default'] = ChatWidget;
module.exports = exports['default'];

},{"./Chat":1,"./ChatUI":2}],4:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _Chat = require('./Chat');

var _Chat2 = _interopRequireDefault(_Chat);

var _ChatUI = require('./ChatUI');

var _ChatWidget = require('./ChatWidget');

var _ChatWidget2 = _interopRequireDefault(_ChatWidget);

OT.TextChat = {
  Chat: _Chat2['default'],
  ChatUI: _ChatUI.ChatUI,
  ChatMessage: _ChatUI.ChatMessage,
  ChatWidget: _ChatWidget2['default']
};

},{"./Chat":1,"./ChatUI":2,"./ChatWidget":3}]},{},[4])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvaG9tZS9zYWx2YS93b3Jrc3BhY2Uvb3BlbnRvay10ZXh0Y2hhdC9zcmMvQ2hhdC5qcyIsIi9ob21lL3NhbHZhL3dvcmtzcGFjZS9vcGVudG9rLXRleHRjaGF0L3NyYy9DaGF0VUkuanMiLCIvaG9tZS9zYWx2YS93b3Jrc3BhY2Uvb3BlbnRvay10ZXh0Y2hhdC9zcmMvQ2hhdFdpZGdldC5qcyIsIi9ob21lL3NhbHZhL3dvcmtzcGFjZS9vcGVudG9rLXRleHRjaGF0L3NyYy9vcGVudG9rLXRleHRjaGF0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FDQ0EsU0FBUyxJQUFJLENBQUMsT0FBTyxFQUFFO0FBQ3JCLE1BQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFO0FBQUUsVUFBTSxJQUFJLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0dBQUU7QUFDOUUsTUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDOztBQUVoQyxNQUFJLFVBQVUsR0FBRyxPQUFPLENBQUMsVUFBVSxJQUFJLE1BQU0sQ0FBQztBQUM5QyxNQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEdBQUcsVUFBVSxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUM1RSxRQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztDQUNsRTs7QUFFRCxJQUFJLENBQUMsU0FBUyxHQUFHO0FBQ2YsYUFBVyxFQUFFLElBQUk7O0FBRWpCLE1BQUksRUFBRSxjQUFVLElBQUksRUFBRSxRQUFRLEVBQUU7QUFDOUIsUUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO0FB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RUFBRSw4QkFBVSxRQUFRLEVBQUUsUUFBUSxFQUFFO0FBQ2xELFFBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztHQUNyQzs7QUFFRCxtQkFBaUIsRUFBRSwyQkFBVSxRQUFRLEVBQUUsSUFBSSxFQUFFO0FBQzNDLFFBQUksT0FBTyxHQUFHLHdCQUFnQixJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDdEUsUUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7R0FDbkM7Q0FDRixDQUFDOztxQkFFYSxVQUFVOzs7Ozs7OztvQkNwQ1IsUUFBUTs7OztzQkFDVyxVQUFVOzswQkFDdkIsY0FBYzs7OztBQUVyQyxFQUFFLENBQUMsUUFBUSxHQUFHO0FBQ1osTUFBSSxtQkFBTTtBQUNWLFFBQU0sZ0JBQVE7QUFDZCxhQUFXLHFCQUFhO0FBQ3hCLFlBQVUseUJBQVk7Q0FDdkIsQ0FBQyIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJcbmZ1bmN0aW9uIENoYXQob3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMgfHwgIW9wdGlvbnMuc2Vzc2lvbikgeyB0aHJvdyBuZXcgRXJyb3IoJ05vIHNlc3Npb24gcHJvdmlkZWQuJyk7IH1cbiAgdGhpcy5fc2Vzc2lvbiA9IG9wdGlvbnMuc2Vzc2lvbjtcblxuICB2YXIgc2lnbmFsTmFtZSA9IG9wdGlvbnMuc2lnbmFsTmFtZSB8fCAnY2hhdCc7XG4gIHRoaXMuX3Nlc3Npb24ub24oJ3NpZ25hbDonICsgc2lnbmFsTmFtZSwgdGhpcy5faGFuZGxlQ2hhdFNpZ25hbC5iaW5kKHRoaXMpKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdzaWduYWxOYW1lJywgeyB2YWx1ZTogc2lnbmFsTmFtZSB9KTtcbn1cblxuQ2hhdC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBDaGF0LFxuXG4gIHNlbmQ6IGZ1bmN0aW9uICh0ZXh0LCBjYWxsYmFjaykge1xuICAgIHZhciBzaWduYWwgPSB0aGlzLl9nZXRNZXNzYWdlU2lnbmFsKHRleHQpO1xuICAgIHRoaXMuX3Nlc3Npb24uc2lnbmFsKHNpZ25hbCwgY2FsbGJhY2spO1xuICB9LFxuXG4gIG9uTWVzc2FnZVJlY2VpdmVkOiBmdW5jdGlvbiAodHlwZSwgY2FsbGJhY2spIHsgY2FsbGJhY2soKTsgfSxcblxuICBfaGFuZGxlQ2hhdFNpZ25hbDogZnVuY3Rpb24gKHNpZ25hbCkge1xuICAgIHZhciBtZSA9IHRoaXMuX3Nlc3Npb24uY29ubmVjdGlvbi5jb25uZWN0aW9uSWQ7XG4gICAgdmFyIGZyb20gPSBzaWduYWwuZnJvbS5jb25uZWN0aW9uSWQ7XG4gICAgaWYgKGZyb20gIT09IG1lKSB7XG4gICAgICB2YXIgaGFuZGxlciA9IHRoaXMub25NZXNzYWdlUmVjZWl2ZWQ7XG4gICAgICBpZiAoaGFuZGxlciAmJiB0eXBlb2YgaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBoYW5kbGVyKHNpZ25hbC5kYXRhLCBzaWduYWwuZnJvbSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIF9nZXRNZXNzYWdlU2lnbmFsOiBmdW5jdGlvbiAodGV4dCkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiB0aGlzLnNpZ25hbE5hbWUsXG4gICAgICBkYXRhOiB0ZXh0XG4gICAgfTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ2hhdDtcbiIsIlxudmFyIHVpTGF5b3V0ID0gW1xuICAnPGRpdiBjbGFzcz1cIm90LWJ1YmJsZXNcIj48L2Rpdj4nLFxuICAnPGRpdiBjbGFzcz1cIm90LWlucHV0XCI+JyxcbiAgJyAgPHAgY2xhc3M9XCJvdC1lcnJvci16b25lXCIgaGlkZGVuPkVycm9yIHNlbmRpbmcgdGhlIG1lc3NhZ2UhPC9wPicsXG4gICcgIDxkaXY+JyxcbiAgJyAgICA8dGV4dGFyZWEgcGxhY2Vob2xkZXI9XCJXcml0ZSBoZXJlJmhlbGxpcDtcIiBjbGFzcz1cIm90LWNvbXBvc2VyXCI+PC90ZXh0YXJlYT4nLFxuICAnICAgIDxkaXYgY2xhc3M9XCJvdC1ib3R0b20tbGluZVwiPicsXG4gICcgICAgICA8cCBjbGFzcz1cIm90LWNoYXJhY3Rlci1jb3VudGVyXCI+PHNwYW4+PC9zcGFuPiBjaGFyYWN0ZXJzIGxlZnQ8L3A+JyxcbiAgJyAgICAgIDxidXR0b24gY2xhc3M9XCJvdC1zZW5kLWJ1dHRvblwiPlNlbmQg4oC6PC9idXR0b24+JyxcbiAgJyAgICA8L2Rpdj4nLFxuICAnICA8L2Rpdj4nLFxuICAnPC9kaXY+J1xuXS5qb2luKCdcXG4nKTtcblxudmFyIGJ1YmJsZUxheW91dCA9IFtcbiAgJzxkaXY+JyxcbiAgJyAgPGhlYWRlciBjbGFzcz1cIm90LWJ1YmJsZS1oZWFkZXJcIj4nLFxuICAnICAgIDxwIGNsYXNzPVwib3QtbWVzc2FnZS1zZW5kZXJcIj48L3A+JyxcbiAgJyAgICA8dGltZSBjbGFzcz1cIm90LW1lc3NhZ2UtdGltZXN0YW1wXCI+PC90aW1lPicsXG4gICcgIDwvaGVhZGVyPicsXG4gICc8L2Rpdj4nXG5dLmpvaW4oJ1xcbicpO1xuXG5mdW5jdGlvbiBDaGF0VUkob3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdGhpcy5zZW5kZXJJZCA9IG9wdGlvbnMuc2VuZGVySWQgfHwgKCcnICsgTWF0aC5yYW5kb20oKSkuc3Vic3RyKDIpO1xuICB0aGlzLnNlbmRlckFsaWFzID0gb3B0aW9ucy5zZW5kZXJBbGlhcyB8fCAnbWUnO1xuICB0aGlzLm1heFRleHRMZW5ndGggPSBvcHRpb25zLm1heFRleHRMZW5ndGggfHwgMTAwMDtcbiAgdGhpcy5ncm91cERlbGF5ID0gb3B0aW9ucy5ncm91cERlbGF5IHx8ICgyICogNjAgKiAxMDAwKTsgLy8gMiBtaW5cbiAgdGhpcy50aW1lb3V0ID0gb3B0aW9ucy50aW1lb3V0IHx8IDUwMDA7XG4gIHRoaXMuX21lc3NhZ2VzID0gW107XG4gIHRoaXMuX3NldHVwVGVtcGxhdGVzKCk7XG4gIHRoaXMuX3NldHVwVUkob3B0aW9ucy5jb250YWluZXIpO1xuICB0aGlzLl91cGRhdGVDaGFyQ291bnRlcigpO1xufVxuXG5DaGF0VUkucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogQ2hhdFVJLFxuXG4gIF9zZXR1cFRlbXBsYXRlczogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2J1YmJsZVRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VjdGlvbicpO1xuICAgIHRoaXMuX2J1YmJsZVRlbXBsYXRlLmlubmVySFRNTCA9IGJ1YmJsZUxheW91dDtcbiAgICB0aGlzLl9idWJibGVUZW1wbGF0ZS5jbGFzc0xpc3QuYWRkKCdvdC1idWJibGUnKTtcbiAgfSxcblxuICBfc2V0dXBVSTogZnVuY3Rpb24gKHBhcmVudCkge1xuICAgIHBhcmVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocGFyZW50KSB8fCBkb2N1bWVudC5ib2R5O1xuXG4gICAgdmFyIGNoYXRWaWV3ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VjdGlvbicpO1xuICAgIGNoYXRWaWV3LmlubmVySFRNTCA9IHVpTGF5b3V0O1xuICAgIGNoYXRWaWV3LmNsYXNzTGlzdC5hZGQoJ290LXRleHRjaGF0Jyk7XG5cbiAgICB2YXIgc2VuZEJ1dHRvbiA9IGNoYXRWaWV3LnF1ZXJ5U2VsZWN0b3IoJy5vdC1zZW5kLWJ1dHRvbicpO1xuICAgIHZhciBjb21wb3NlciA9IGNoYXRWaWV3LnF1ZXJ5U2VsZWN0b3IoJy5vdC1jb21wb3NlcicpO1xuICAgIHZhciBjaGFyQ291bnRlciA9IGNoYXRWaWV3LnF1ZXJ5U2VsZWN0b3IoJy5vdC1jaGFyYWN0ZXItY291bnRlciA+IHNwYW4nKTtcbiAgICB2YXIgZXJyb3Jab25lID0gY2hhdFZpZXcucXVlcnlTZWxlY3RvcignLm90LWVycm9yLXpvbmUnKTtcblxuICAgIHRoaXMuX2NvbXBvc2VyID0gY29tcG9zZXI7XG4gICAgdGhpcy5fc2VuZEJ1dHRvbiA9IHNlbmRCdXR0b247XG4gICAgdGhpcy5fY2hhckNvdW50ZXIgPSBjaGFyQ291bnRlcjtcbiAgICB0aGlzLl9idWJibGVzID0gY2hhdFZpZXcuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gICAgdGhpcy5fZXJyb3Jab25lID0gZXJyb3Jab25lO1xuXG4gICAgdGhpcy5fc2VuZEJ1dHRvbi5vbmNsaWNrID0gdGhpcy5fc2VuZE1lc3NhZ2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9jb21wb3Nlci5vbmtleXVwID0gdGhpcy5fdXBkYXRlQ2hhckNvdW50ZXIuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9jb21wb3Nlci5vbmtleWRvd24gPSB0aGlzLl9jb250cm9sQ29tcG9zZXJJbnB1dC5iaW5kKHRoaXMpO1xuXG4gICAgcGFyZW50LmFwcGVuZENoaWxkKGNoYXRWaWV3KTtcbiAgfSxcblxuICBfc2VuZE1lc3NhZ2U6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHZhciBjb250ZW50cyA9IHRoaXMuX2NvbXBvc2VyLnZhbHVlO1xuXG4gICAgaWYgKGNvbnRlbnRzLmxlbmd0aCA+IF90aGlzLm1heFRleHRMZW5ndGgpIHtcbiAgICAgIF90aGlzLl9zaG93VG9vTG9uZ1RleHRFcnJvcigpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIF90aGlzLl9oaWRlRXJyb3JzKCk7XG4gICAgICBpZiAodHlwZW9mIF90aGlzLm9uTWVzc2FnZVJlYWR5VG9TZW5kID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIF90aGlzLmRpc2FibGVTZW5kaW5nKCk7XG5cbiAgICAgICAgdmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy5zaG93RXJyb3IoKTtcbiAgICAgICAgICBfdGhpcy5lbmFibGVTZW5kaW5nKCk7XG4gICAgICAgIH0sIF90aGlzLnRpbWVvdXQpO1xuXG4gICAgICAgIHZhciBzZW50ID0gX3RoaXMub25NZXNzYWdlUmVhZHlUb1NlbmQoY29udGVudHMsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgX3RoaXMuX3Nob3dFcnJvcigpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLmFkZE1lc3NhZ2UobmV3IENoYXRNZXNzYWdlKFxuICAgICAgICAgICAgICBfdGhpcy5zZW5kZXJJZCxcbiAgICAgICAgICAgICAgX3RoaXMuc2VuZGVyQWxpYXMsXG4gICAgICAgICAgICAgIGNvbnRlbnRzXG4gICAgICAgICAgICApKTtcbiAgICAgICAgICAgIF90aGlzLl9jb21wb3Nlci52YWx1ZSA9ICcnO1xuICAgICAgICAgICAgX3RoaXMuX3VwZGF0ZUNoYXJDb3VudGVyKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIF90aGlzLmVuYWJsZVNlbmRpbmcoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgX3Nob3dUb29Mb25nVGV4dEVycm9yOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fY2hhckNvdW50ZXIuY2xhc3NMaXN0LmFkZCgnZXJyb3InKTtcbiAgfSxcblxuICBfc2hvd0Vycm9yOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fZXJyb3Jab25lLmhpZGRlbiA9IGZhbHNlO1xuICB9LFxuXG4gIF9oaWRlRXJyb3JzOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fZXJyb3Jab25lLmhpZGRlbiA9IHRydWU7XG4gICAgdGhpcy5fY2hhckNvdW50ZXIuY2xhc3NMaXN0LnJlbW92ZSgnZXJyb3InKTtcbiAgfSxcblxuICBfc2hvd0Vycm9yOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fZXJyb3Jab25lLmhpZGRlbiA9IGZhbHNlO1xuICB9LFxuXG4gIF9jb250cm9sQ29tcG9zZXJJbnB1dDogZnVuY3Rpb24gKGV2dCkge1xuICAgIHZhciBpc0VudGVyID0gZXZ0LndoaWNoID09PSAxMyB8fCBldnQua2V5Q29kZSA9PT0gMTM7XG4gICAgaWYgKCFldnQuc2hpZnRLZXkgJiYgaXNFbnRlcikge1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLl9zZW5kTWVzc2FnZSgpO1xuICAgIH1cbiAgfSxcblxuICBfdXBkYXRlQ2hhckNvdW50ZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVtYWluaW5nID0gdGhpcy5tYXhUZXh0TGVuZ3RoIC0gdGhpcy5fY29tcG9zZXIudmFsdWUubGVuZ3RoO1xuICAgIHZhciBpc1ZhbGlkID0gcmVtYWluaW5nID49IDA7XG4gICAgdGhpcy5fY2hhckNvdW50ZXIuY2xhc3NMaXN0WyFpc1ZhbGlkID8gJ2FkZCcgOiAncmVtb3ZlJ10oJ2Vycm9yJyk7XG4gICAgdGhpcy5fY2hhckNvdW50ZXIudGV4dENvbnRlbnQgPSByZW1haW5pbmc7XG4gIH0sXG5cbiAgYWRkTWVzc2FnZTogZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICB2YXIgc2hvdWxkR3JvdXAgPSB0aGlzLl9zaG91bGRHcm91cChtZXNzYWdlKTtcbiAgICB0aGlzWyBzaG91bGRHcm91cCA/ICdfZ3JvdXBCdWJibGUnIDogJ19hZGROZXdCdWJibGUnIF0obWVzc2FnZSk7XG4gICAgdGhpcy5fbWVzc2FnZXMucHVzaChtZXNzYWdlKTtcbiAgfSxcblxuICBlbmFibGVTZW5kaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fc2VuZEJ1dHRvbi5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XG4gICAgdGhpcy5fY29tcG9zZXIucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xuICAgIHRoaXMuX2NvbXBvc2VyLmZvY3VzKCk7XG4gIH0sXG5cbiAgZGlzYWJsZVNlbmRpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9zZW5kQnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcbiAgICB0aGlzLl9jb21wb3Nlci5kaXNhYmxlZCA9IHRydWU7XG4gIH0sXG5cbiAgX3Nob3VsZEdyb3VwOiBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgIGlmICh0aGlzLl9sYXN0TWVzc2FnZSAmJiB0aGlzLl9sYXN0TWVzc2FnZS5zZW5kZXJJZCA9PT0gbWVzc2FnZS5zZW5kZXJJZCkge1xuICAgICAgdmFyIHJlZmVyZW5jZSA9IHRoaXMuX2xhc3RNZXNzYWdlLmRhdGVUaW1lLmdldFRpbWUoKTtcbiAgICAgIHZhciBuZXdEYXRlID0gbWVzc2FnZS5kYXRlVGltZS5nZXRUaW1lKCk7XG4gICAgICByZXR1cm4gbmV3RGF0ZSAtIHJlZmVyZW5jZSA8IHRoaXMuZ3JvdXBEZWxheTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIF9ncm91cEJ1YmJsZTogZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICB0aGlzLl9sYXN0QnViYmxlLmFwcGVuZENoaWxkKHRoaXMuX2dldEJ1YmJsZUNvbnRlbnQobWVzc2FnZS50ZXh0KSk7XG4gICAgdGhpcy5fbGFzdFRpbWVzdGFtcC50ZXh0Q29udGVudCA9IHRoaXMuX2h1bWFuaXplKG1lc3NhZ2UuZGF0ZVRpbWUpO1xuICB9LFxuXG4gIF9hZGROZXdCdWJibGU6IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgdGhpcy5fYnViYmxlcy5hcHBlbmRDaGlsZCh0aGlzLl9nZXRCdWJibGUobWVzc2FnZSkpO1xuICB9LFxuXG4gIGdldCBfbGFzdE1lc3NhZ2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21lc3NhZ2VzW3RoaXMuX21lc3NhZ2VzLmxlbmd0aCAtIDFdO1xuICB9LFxuXG4gIGdldCBfbGFzdEJ1YmJsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fYnViYmxlcy5sYXN0RWxlbWVudENoaWxkLnF1ZXJ5U2VsZWN0b3IoJ2RpdicpO1xuICB9LFxuXG4gIGdldCBfbGFzdFRpbWVzdGFtcCgpIHtcbiAgICByZXR1cm4gdGhpcy5fYnViYmxlc1xuICAgICAgLmxhc3RFbGVtZW50Q2hpbGQucXVlcnlTZWxlY3RvcignLm90LW1lc3NhZ2UtdGltZXN0YW1wJyk7XG4gIH0sXG5cbiAgX2dldEJ1YmJsZUNvbnRlbnQ6IGZ1bmN0aW9uIChzYWZlSHRtbCkge1xuICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdESVYnKTtcbiAgICBkaXYuY2xhc3NMaXN0LmFkZCgnb3QtYnViYmxlLWNvbnRlbnQnKTtcbiAgICBkaXYuaW5uZXJIVE1MID0gc2FmZUh0bWw7XG4gICAgcmV0dXJuIGRpdjtcbiAgfSxcblxuICBfZ2V0QnViYmxlOiBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgIHZhciBidWJibGUgPSB0aGlzLl9idWJibGVUZW1wbGF0ZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgdmFyIHdyYXBwZXIgPSBidWJibGUucXVlcnlTZWxlY3RvcignZGl2Jyk7XG4gICAgdmFyIHNlbmRlciA9IHdyYXBwZXIucXVlcnlTZWxlY3RvcignLm90LW1lc3NhZ2Utc2VuZGVyJyk7XG4gICAgdmFyIHRpbWVzdGFtcCA9IHdyYXBwZXIucXVlcnlTZWxlY3RvcignLm90LW1lc3NhZ2UtdGltZXN0YW1wJyk7XG5cbiAgICAvLyBTZW5kZXIgJiBhbGlhc1xuICAgIGJ1YmJsZS5kYXRhc2V0LnNlbmRlcklkID0gbWVzc2FnZS5zZW5kZXJJZDtcbiAgICBpZiAobWVzc2FnZS5zZW5kZXJJZCA9PT0gdGhpcy5zZW5kZXJJZCkge1xuICAgICAgYnViYmxlLmNsYXNzTGlzdC5hZGQoJ21pbmUnKTtcbiAgICB9XG4gICAgc2VuZGVyLnRleHRDb250ZW50ID0gbWVzc2FnZS5zZW5kZXJBbGlhcztcblxuICAgIC8vIENvbnRlbnRcbiAgICB3cmFwcGVyLmFwcGVuZENoaWxkKHRoaXMuX2dldEJ1YmJsZUNvbnRlbnQobWVzc2FnZS50ZXh0KSk7XG5cbiAgICAvLyBUaW1lc3RhbXBcbiAgICB0aW1lc3RhbXAuZGF0ZVRpbWUgPSBtZXNzYWdlLmRhdGVUaW1lLnRvSVNPU3RyaW5nKCk7XG4gICAgdGltZXN0YW1wLnRleHRDb250ZW50ID0gdGhpcy5faHVtYW5pemUobWVzc2FnZS5kYXRlVGltZSk7XG5cbiAgICByZXR1cm4gYnViYmxlO1xuICB9LFxuXG4gIF9odW1hbml6ZTogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS50b1VUQ1N0cmluZygpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBDaGF0TWVzc2FnZShzZW5kZXJJZCwgc2VuZGVyQWxpYXMsIHRleHQpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgIHNlbmRlcklkOiB7IHZhbHVlOiBzZW5kZXJJZCB9LFxuICAgIHNlbmRlckFsaWFzOiB7IHZhbHVlOiBzZW5kZXJBbGlhcyB9LFxuICAgIHRleHQ6IHsgdmFsdWU6IHRleHQgfSxcbiAgICBkYXRlVGltZTogeyB2YWx1ZTogbmV3IERhdGUoKSB9XG4gIH0pO1xufVxuXG5leHBvcnQgeyBDaGF0VUksIENoYXRNZXNzYWdlIH07XG4iLCJcbmltcG9ydCBDaGF0IGZyb20gJy4vQ2hhdCc7XG5pbXBvcnQgeyBDaGF0VUksIENoYXRNZXNzYWdlIH0gZnJvbSAnLi9DaGF0VUknO1xuXG5mdW5jdGlvbiBDaGF0V2lkZ2V0KG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHRoaXMuX2NoYXRCb3ggPSBuZXcgQ2hhdFVJKG9wdGlvbnMpO1xuICB0aGlzLl9jaGF0Qm94LmRpc2FibGVTZW5kaW5nKCk7XG4gIGlmIChvcHRpb25zLnNlc3Npb24pIHtcbiAgICB0aGlzLnN0YXJ0KG9wdGlvbnMpO1xuICB9XG59XG5cbkNoYXRXaWRnZXQucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogQ2hhdFdpZGdldCxcblxuICBzdGFydDogZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICBpZiAoIXRoaXMuX2NoYXQpIHtcbiAgICAgIHRoaXMuX2NoYXQgPSBuZXcgQ2hhdChvcHRpb25zKTtcbiAgICAgIHRoaXMuX2NoYXQub25NZXNzYWdlUmVjZWl2ZWQgPSB0aGlzLm9uTWVzc2FnZVJlY2VpdmVkLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLl9jaGF0Qm94LnNlbmRlcklkID0gb3B0aW9ucy5zZXNzaW9uLmNvbm5lY3Rpb24uY29ubmVjdGlvbklkO1xuICAgICAgdGhpcy5fY2hhdEJveC5zZW5kZXJBbGlhcyA9IG9wdGlvbnMuc2Vzc2lvbi5jb25uZWN0aW9uLmRhdGE7XG4gICAgICB0aGlzLl9jaGF0Qm94Lm9uTWVzc2FnZVJlYWR5VG9TZW5kID0gdGhpcy5vbk1lc3NhZ2VSZWFkeVRvU2VuZC5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5fY2hhdEJveC5lbmFibGVTZW5kaW5nKCk7XG4gICAgfVxuICB9LFxuXG4gIG9uTWVzc2FnZVJlYWR5VG9TZW5kOiBmdW5jdGlvbiAoY29udGVudHMsIGNhbGxiYWNrKSB7XG4gICAgdGhpcy5fY2hhdC5zZW5kKGNvbnRlbnRzLCBjYWxsYmFjayk7XG4gIH0sXG5cbiAgb25NZXNzYWdlUmVjZWl2ZWQ6IGZ1bmN0aW9uIChjb250ZW50cywgZnJvbSkge1xuICAgIHZhciBtZXNzYWdlID0gbmV3IENoYXRNZXNzYWdlKGZyb20uY29ubmVjdGlvbklkLCBmcm9tLmRhdGEsIGNvbnRlbnRzKTtcbiAgICB0aGlzLl9jaGF0Qm94LmFkZE1lc3NhZ2UobWVzc2FnZSk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IENoYXRXaWRnZXQ7XG4iLCJcbmltcG9ydCBDaGF0IGZyb20gJy4vQ2hhdCc7XG5pbXBvcnQgeyBDaGF0VUksIENoYXRNZXNzYWdlIH0gZnJvbSAnLi9DaGF0VUknO1xuaW1wb3J0IENoYXRXaWRnZXQgZnJvbSAnLi9DaGF0V2lkZ2V0JztcblxuT1QuVGV4dENoYXQgPSB7XG4gIENoYXQ6IENoYXQsXG4gIENoYXRVSTogQ2hhdFVJLFxuICBDaGF0TWVzc2FnZTogQ2hhdE1lc3NhZ2UsXG4gIENoYXRXaWRnZXQ6IENoYXRXaWRnZXRcbn07XG4iXX0=
